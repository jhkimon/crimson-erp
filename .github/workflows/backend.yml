name: backend-ci-cd

on:
    push:
        branches: ["main"]
        paths:
            - "**/*.py"
            - "requirements.txt"
            - "Pipfile*"
            - "api/**"
            - "apps/**"
            - "crimsonerp/**"
            - ".github/workflows/backend.yml"
    workflow_dispatch:

jobs:
    ci:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Cache pip
              uses: actions/cache@v4
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Install deps
              run: |
                  python -m pip install -U pip
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

            # 테스트가 아직 없을 수 있으니 최소한의 유효성 체크
            - name: Django sanity check
              env:
                  DJANGO_SETTINGS_MODULE: crimsonerp.settings
                  DB_NAME: ${{ secrets.DB_NAME }}
                  DB_USER: ${{ secrets.DB_USER }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  DB_HOST: ${{ secrets.DB_HOST }}
                  DB_PORT: ${{ secrets.DB_PORT }}

                  DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
                  DJANGO_CORS_ALLOWED_ORIGINS: ${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }}
                  DJANGO_CSRF_TRUSTED_ORIGINS: ${{ secrets.DJANGO_CSRF_TRUSTED_ORIGINS }}
              run: |
                  python manage.py check
                  # manage.py 가 루트에 있으니 ok

    deploy:
        needs: ci
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout (for GITHUB_SHA)
              uses: actions/checkout@v4

            - name: Deploy via SSH (git pull on server, install, migrate, collectstatic, restart)
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  envs: GITHUB_SHA,APP_DIR,VENV_DIR,GUNICORN_SERVICE,PYTHON_BIN,PIP_BIN
                  script: |
                      set -e

                      # 1) 디렉토리와 venv 경로
                      APP_DIR=${{ secrets.APP_DIR }}                 # 예) /srv/app/crimson-erp
                      VENV_DIR=${{ secrets.VENV_DIR }}               # 예) /srv/venvs/crimson-erp
                      PYTHON_BIN=${{ secrets.PYTHON_BIN || '/usr/bin/python3' }}
                      PIP_BIN=${{ secrets.PIP_BIN || '/usr/bin/pip3' }}
                      GUNICORN_SERVICE=${{ secrets.GUNICORN_SERVICE }}  # 예) crimsonerp

                      echo "==> cd $APP_DIR"
                      cd "$APP_DIR"

                      # 2) 깃 최신화 (현재 서버에 clone 되어 있다는 전제)
                      echo "==> git fetch & checkout $GITHUB_SHA"
                      git fetch --all --prune
                      git reset --hard $GITHUB_SHA

                      # 3) 가상환경 준비
                      if [ ! -d "$VENV_DIR" ]; then
                        echo "==> create venv: $VENV_DIR"
                        $PYTHON_BIN -m venv "$VENV_DIR"
                      fi

                      echo "==> activate venv"
                      . "$VENV_DIR/bin/activate"
                      python -m pip install --upgrade pip

                      # 4) 의존성 설치
                      if [ -f requirements.txt ]; then
                        echo "==> pip install -r requirements.txt"
                        pip install -r requirements.txt
                      elif [ -f Pipfile.lock ] || [ -f Pipfile ]; then
                        echo "==> pipenv install --system --deploy"
                        pip install pipenv
                        pipenv install --system --deploy
                      fi

                      # 5) Django 관리 명령
                      echo "==> Django migrate/collectstatic"
                      export DJANGO_SETTINGS_MODULE=crimsonerp.settings
                      export PYTHONPATH="$APP_DIR"
                      # 필요 시 .env를 읽는 로직을 settings.py에 포함시켜둔 상태여야 함

                      python manage.py migrate --noinput
                      python manage.py collectstatic --noinput

                      # 6) 서비스 재시작
                      echo "==> restart gunicorn service: $GUNICORN_SERVICE"
                      sudo systemctl restart "$GUNICORN_SERVICE"

                      # 7) Nginx(정적파일 캐시 갱신 필요 시)
                      echo "==> reload nginx"
                      sudo systemctl reload nginx || true
